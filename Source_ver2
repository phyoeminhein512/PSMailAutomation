function main(){
  Logger.log("処理開始：" + new Date());
  //スプレッドシート名を元にシート取得
  var dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("GIT（営業担当者）");
  //スプレッドシート読み込んで対象スタッフ取得
  var staffList = getStaffs(dataSheet);
  //初回送信対象メールアドレスリスト
  var firstTimeEmailsList = [];
  //2回目送信対象メールアドレスリスト
  var secondTimeEmailsList = [];
  var lastTimekiken;
  //cellsリスト（PS更新依頼日とPS返却予定日更新する為）
  var cellsList = [];
  
  //メールアドレスチェック
  //フラグを元に初回・2回目判定
  if(staffList.length != 0){
    for(var k = 0; k < staffList.length; k++){
        //初回・2回目判定
        if(staffList[k].flag == true){
          if(staffList[k].email != '' && staffList[k].email != null){
            secondTimeEmailsList.push(staffList[k].email);
          }
          if(staffList[k].businessPartnerEmail != '' && staffList[k].businessPartnerEmail != null){
            secondTimeEmailsList.push(staffList[k].businessPartnerEmail);
          }
          if(staffList[k].headBusinessPartnerEmail != '' && staffList[k].headBusinessPartnerEmail != null){
            secondTimeEmailsList.push(staffList[k].headBusinessPartnerEmail);
          }
          lastTimekiken = staffList[k].expectedResponseDate;
        }else{
          if(staffList[k].email != '' && staffList[k].email != null){
            firstTimeEmailsList.push(staffList[k].email);
          }
          if(staffList[k].businessPartnerEmail != '' && staffList[k].businessPartnerEmail != null){
            firstTimeEmailsList.push(staffList[k].businessPartnerEmail);
          }
          if(staffList[k].headBusinessPartnerEmail != '' && staffList[k].headBusinessPartnerEmail != null){
            firstTimeEmailsList.push(staffList[k].headBusinessPartnerEmail);
          }
          cellsList.push(staffList[k].cellId);
        }
    }

    //重複メールアドレス削除
    var uniqueFirstTimeEmailsList = toUniqueArray(firstTimeEmailsList);
    var uniqueSecondTimeEmailsList = toUniqueArray(secondTimeEmailsList);

    Logger.log("初回送信対象メールアドレス ");
    //Logger.log(firstTimeEmailsList);
    Logger.log(uniqueFirstTimeEmailsList);
    Logger.log("2回目送信対象メールアドレス");
    //Logger.log(secondTimeEmailsList);
    Logger.log(uniqueSecondTimeEmailsList);
    //Logger.log(cellsList);
    //メール送信実施
    if(uniqueFirstTimeEmailsList.length != 0){
      sendEmail(uniqueFirstTimeEmailsList,dataSheet,cellsList);
    }
    if(uniqueSecondTimeEmailsList.length != 0){
      sendRemindMail(uniqueSecondTimeEmailsList, lastTimekiken);
    }
  }else{
    Logger.log("対象スタッフなしです。");
  }
  Logger.log("処理終了：" + new Date());
}

//スプレッドシート読み込む
//返却：送信対象スタッフリスト
function getStaffs(dataSheet) {
  try{
      //スタッフプロフィール項目
      var data = dataSheet.getDataRange().getValues(); //スプレッドシートデータ配列
      var iteNo; //スタッフID
      var result; //結果
      var status; //ステータス
      var email; //メールアドレス
      var dispatchEndDate; //派遣終了日
      var requestDate; //変更依頼日
      var responseDate; //返却日
      var expectedResponseDate; //返却予定日
      var businessPartner; //営業担当名
      var businessPartnerEmail; //営業担当メールアドレス
      var headBusinessPartner; //営業担当課名
      var headBusinessPartnerEmail; //営業担当課メールアドレス
      var now = new Date(); //現在の日付
      var daysDiff; //派遣終了日 - 現在の日
      var remindDays; //現在の日 - 返却予定日
      var staffList = []; //メール送信対象スタッフリスト
      var bpdataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("mail（営業）"); //スプレッドシート名を元にシート取得
      var bpData = bpdataSheet.getDataRange().getValues(); // 営業担当メールデータ配列

      //1レコード毎読み込み
      for(var i = 1; i < data.length; i++){
        iteNo = data[i][0];
        result = data[i][13];
        status = data[i][16];
        dispatchEndDate = data[i][3];
        email = data[i][41];
        requestDate = data[i][30];
        expectedResponseDate = data[i][31];
        responseDate = data[i][32];
        businessPartner　= data[i][4];
        headBusinessPartner = data[i][20];
        
        //営業担当メールアドレス取得
        for(var y = 1; y < bpData.length; y++){
          if(bpData[y][0].toString().trim().replace("　","") == businessPartner.trim().replace("　","")){
            businessPartnerEmail = bpData[y][1];
            //Logger.log(businessPartnerEmail);
          }else if(bpData[y][0].toString().trim() == headBusinessPartner.trim()){
            headBusinessPartnerEmail = bpData[y][1];
            //Logger.log(headBusinessPartnerEmail);
          }
        }
        
        //派遣終了日 - 現在の日
        if(dispatchEndDate != '' && dispatchEndDate != "#N/A"){
          daysDiff = dateDiff(dispatchEndDate, now);
        }else{
          daysDiff = undefined;
        }

        //現在の日 - 返却予定日
        if(requestDate != '' && requestDate != "#N/A" && expectedResponseDate != '' && expectedResponseDate != "#N/A"){
          remindDays = dateDiff(now, expectedResponseDate);
        }else{
          remindDays = undefined;
        }
        //Logger.log(remindDays);

        //★★★★★★★対象スタッフ判定★★★★★★★★
        //結果が更新以外、且つ派遣終了日 - 現在の日<=60、且つステータスが退職以外、メールアドレスが空白以外、且つ変更依頼日が空白
        if(result != '更新' && daysDiff <= 60 && status != '退職' && requestDate == ''){
          var staff = {};
          staff.iteNo = iteNo;
          staff.cellId = i+1;
          //スタッフメールアドレスチェック
          if(validateEmail(email)){
            staff.email = email;
          }else{
            Logger.log("無効なメールアドレス: " + iteNo + " : " + email);
            logOut(iteNo, "", 1);
            continue; //スタッフメール不正の場合スキップする
          }

          //営業担当メールアドレスチェック
          if(validateEmail(businessPartnerEmail)){
            staff.businessPartnerEmail = businessPartnerEmail;
          }else{
            Logger.log("無効なメールアドレス: " + businessPartner + " : " + businessPartnerEmail);
            logOut(iteNo, businessPartner, 0);
          }

          //営業担当課メールアドレスチェック
          if(validateEmail(headBusinessPartnerEmail)){
            staff.headBusinessPartnerEmail = headBusinessPartnerEmail;
          }else{
            Logger.log("無効なメールアドレス: " + headBusinessPartner + " : " + headBusinessPartnerEmail);
            logOut(iteNo, headBusinessPartner, 0);
          }
          staffList.push(staff);
        }else if((responseDate == '' || responseDate == "#N/A") && remindDays >= -1 ){ //Remind mail 対象
          var staff = {};
          staff.iteNo = iteNo;
          staff.cellId = i+1;
          staff.expectedResponseDate = expectedResponseDate;
          staff.flag = true; //初回と2回目判定フラグ・2回目の場合フラグ立てる
          //スタッフメールアドレスチェック
          if(validateEmail(email)){
            staff.email = email;
          }else{
            Logger.log("無効なメールアドレス: " + iteNo + " : " + email);
            logOut(iteNo, "", 1);
            continue; //スタッフメール不正の場合スキップする
          }

          //営業担当メールアドレスチェック
          if(validateEmail(businessPartnerEmail)){
            staff.businessPartnerEmail = businessPartnerEmail;
          }else{
            Logger.log("無効なメールアドレス: " + businessPartner + " : " + businessPartnerEmail);
            logOut(iteNo, businessPartner, 0);
          }

          //営業担当課メールアドレスチェック
          if(validateEmail(headBusinessPartnerEmail)){
            staff.headBusinessPartnerEmail = headBusinessPartnerEmail;
          }else{
            Logger.log("無効なメールアドレス: " + headBusinessPartner + " : " + headBusinessPartnerEmail);
            logOut(iteNo, headBusinessPartner, 0);
          }
          staffList.push(staff);
        }
      }
      Logger.log("対象スタッフリスト");
      Logger.log(staffList);
  }catch (error){
    Logger.log("スプレッドシート読み込み異常発生");
    Logger.log(error);
  }finally{
    return staffList;
  }
}

//メール送信
//PS更新依頼日とPS返却予定日更新
function sendEmail(emailsList, dataSheet, cellsList){
  try{
    //件名
    var subjectName = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(2 ,4).getValue();
    //メールテンプレート取得
    var templateText = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(2 ,3).getValue();
    //Toメールアドレス取得
    var jMEmailsList = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(2 ,2).getValue();
    //回答納期整理
    var replyDate = (getNextWeek(new Date()).getMonth()+1) +"月"+ getNextWeek(new Date).getDate() + "日";
    var messageBody = templateText.replace("{replydate}", replyDate);
    //メール送信
    MailApp.sendEmail({to: jMEmailsList, bcc: emailsList.join(","), subject: subjectName, htmlBody:  messageBody}); 
    //PS更新依頼日とPS返却予定日更新
    updateDates(dataSheet,cellsList);
  }catch (emailSendErr){
    Logger.log("メール送信異常発生");
    Logger.log(emailSendErr);
  }
}

function sendRemindMail(emailsList, lastTimekiken){
  //件名
  var subjectName = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(3 ,4).getValue();
  //メールテンプレート取得
  var templateText = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(3 ,3).getValue();
  //Toメールアドレス取得
  var jMEmailsList = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("MailTemplate").getRange(3 ,2).getValue();
  //回答納期整理
  var replyDate = (lastTimekiken.getMonth()+1) +"月"+ (lastTimekiken.getDate()) + "日";
  var messageBody = templateText.replace("{replydate}", replyDate);
  //メール送信
  MailApp.sendEmail({to: jMEmailsList, bcc: emailsList.join(","), subject: subjectName, htmlBody:  messageBody});
}

//日差分計算
function dateDiff(date1, date2){
  try{
    var t1 = date1.getTime(),
        t2 = date2.getTime();
    var diffInDays = Math.floor((t1-t2)/(24*3600*1000));
  }catch (dateErr){
    Logger.log("①日付計算異常発生");
    Logger.log(dateErr);
  }finally{
    return diffInDays;
  }
}

//PS変更依頼日、PS返却予定日更新
function updateDates(dataSheet, cellsList){
  for(var j = 0; j < cellsList.length; j++){
    //Logger.log(cellsList[j]);
    dataSheet.getRange(cellsList[j], 31).setValue(Utilities.formatDate(new Date(), "GMT+1", "dd/MM/yyyy"));
    dataSheet.getRange(cellsList[j], 32).setValue(Utilities.formatDate(getNextWeek(new Date()), "GMT+1", "dd/MM/yyyy"))
  }
}

//一週間後の日付を取得
function getNextWeek(date){
  try{
    var MILLIS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;
    var nextWeek = new Date(date.getTime() + MILLIS_PER_WEEK);
  }catch (dateErr){
    Logger.log("②日付計算異常発生");
    Logger.log(dateErr);
  }finally{
    return nextWeek;
  }
}

//メールアドレスチェック
function validateEmail(email) {
  var re = /\S+@\S+\.\S+/;
  if (!re.test(email)) {
    return false;
  } else {
    return true;
  }
}

//ログ出力
function logOut(iteNo, bpName, level){
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("ログ");
  var Avals = sheet.getRange("A1:A").getValues();
  var Alast = Avals.filter(String).length;
  //Logger.log(Alast);
  sheet.getRange(Alast+1, 1).setValue(Utilities.formatDate(new Date(), "GMT+1", "yyyy/MM/dd"));
  if(level == 1){
    sheet.getRange(Alast+1, 2).setValue("危険");
    sheet.getRange(Alast+1, 3).setValue(iteNo);
    sheet.getRange(Alast+1, 4).setValue("メールアドレスにエラー");
  }else{
    sheet.getRange(Alast+1, 2).setValue("普通");
    sheet.getRange(Alast+1, 3).setValue(bpName);
    sheet.getRange(Alast+1, 4).setValue("メールアドレスにエラー");
  }
}

//配列重複削除
function toUniqueArray(a){
    var newArr = [];
    for (var i = 0; i < a.length; i++) {
        if (newArr.indexOf(a[i]) === -1) {
            newArr.push(a[i]);
        }
    }
  return newArr;
}
